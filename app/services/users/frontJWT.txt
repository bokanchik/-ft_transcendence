Authorization: Bearer <votre_jwt_ici>


const jwtToken = localStorage.getItem('authToken'); // Ou là où vous stockez le token

if (jwtToken) {
  fetch('/api/users/me', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${jwtToken}`,
      'Content-Type': 'application/json' // Bonne pratique, même pour GET sans corps
    }
  })
  .then(response => {
    if (!response.ok) {
      // Gérer les erreurs HTTP (401 Unauthorized, etc.)
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  })
  .then(userProfile => {
    console.log('User profile:', userProfile);
    // Afficher les infos de l'utilisateur, etc.
  })
  .catch(error => {
    console.error('Error fetching user profile:', error);
    // Gérer les erreurs (token invalide, déconnexion, etc.)
  });
} else {
  console.log('No token found, user is not logged in.');
  // Rediriger vers la page de connexion, etc.
}


// Exemple de getUserMeHandler (probablement dans votre fichier routes/users.js)
// Assurez-vous qu'il prend bien 'req' et 'reply' en arguments
export async function getUserMeHandler(req, reply) {
  try {
    // Le payload du JWT est disponible ici grâce au hook authenticate !
    const userId = req.user.id; // Accès à l'ID contenu dans le payload
    const userEmail = req.user.email; // Accès à l'email (si inclus dans le payload)
    // ... autres propriétés du payload ...

    fastify.log.debug(`Fetching profile for user ID from token: ${userId}`);

    // Vous POUVEZ utiliser l'ID du token pour récupérer les données à jour de la BDD,
    // ce qui est une bonne pratique pour avoir les infos les plus fraîches.
    // Ou, si le payload contient suffisamment d'infos et que la fraîcheur n'est pas critique,
    // vous pourriez renvoyer directement une partie du payload.
    // L'exemple ci-dessous récupère les données fraîches :
    const userProfile = await userService.getUserById(userId); // Utilise un service pour chercher en BDD

    // Attention: Ne renvoyez jamais le mot de passe ou d'autres infos sensibles !
    // Assurez-vous que userProfile ne contient que les données publiques/pertinentes.

    reply.send(userProfile);

  } catch (error) {
    // Log l'erreur spécifique côté serveur
    fastify.log.error(`Error in /me handler for user ${req.user?.id}: ${error.message}`);

    // Envoyer une réponse d'erreur générique ou spécifique au client
    // Le cas 404 est géré ici si userService.getUserById échoue, par exemple.
    reply.code(404).send({ error: "Profil utilisateur non trouvé ou erreur interne." });
  }
}
