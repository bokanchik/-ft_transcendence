openapi: 3.0.3
info:
  title: Ping-Pong API
  version: 1.0.0
  description: REST API for a ping-pong contest

paths:
  /api/users/auth/register:
    post:
      summary: Register a new user
      description: |
        Register a new user to the website using username, email, password, and display name.
        Returns a success message with a JWT token on success, or an error message if registration fails.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - display_name
              properties:
                username:
                  type: string
                  example: john
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: "1234abcd"
                display_name:
                  type: string
                  example: JohnDoe
      responses: # Action's response list
        "201":
          description: |
            User successfully registered and token generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registration successful
                  token:
                    type: string
                    description: The JSON Web Token (JWT) used for authentication
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "400":
          description: Bad request (e.g., username or email already exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username already exists

  /api/users/auth/login:
    post:
      summary: Log in an existing user
      description: |
        Authenticate a user using either their username or email and password.
        If successful, returns a success message with a session ID and a JSON Web Token (JWT).
        If authentication fails, returns an error message indicating invalid user credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                username:
                  type: string
                  example: john
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: "1234abcd"
      responses:
        "200":
          description: User successfully authenticated and logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  sessionId:
                    type: string
                    description: The unique session identifier for the user
                    example: "abc123xyz"
                  token:
                    type: string
                    description: The JSON Web Token (JWT) used for further authenticated requests
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: Invalid username/email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid username/email or password"

  /api/users/auth/logout:
    post:
      summary: Log out the current user
      description: |
        Logs out the currently authenticated user by invalidating their session or token.
        This route requires the user to be logged in. The system will verify the user's token
        or session and remove it, effectively logging them out.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          description: User successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        "401":
          description: Unauthorized (user is not logged in or session/token is invalid)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not logged in"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error while processing the logout request"
  
  /api/users/me/:
    put:
      summary: Edit the authenticated user's profile
      description: |
        Allows the user to update their profile details like username, display name, and email.
        The user can only edit their own profile.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john_updated"
                display_name:
                  type: string
                  example: "JohnTheLegend"
                email:
                  type: string
                  format: email
                  example: "john_updated@example.com"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile updated successfully"
        "400":
          description: Bad request (invalid data)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid data provided"
        "401":
          description: Unauthorized (user not logged in or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authenticated"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating profile"

  /api/users/me:
      get:
        summary: Get the authenticated user's profile
        description: |
          Fetch the profile of the currently authenticated user.
          This route requires the user to be logged in (authenticated) and returns user-specific data such as username, email, and display name.
        responses:
          "200":
            description: Successfully fetched the user's profile
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    username:
                      type: string
                      description: The user's username
                      example: "john"
                    email:
                      type: string
                      format: email
                      description: The user's email address
                      example: "john@example.com"
                    display_name:
                      type: string
                      description: The user's display name
                      example: "JohnTheGreat"
                    avatar:
                      type: string
                      format: binary
                      description: URL to the user's profile picture
                      example: "https://example.com/path/to/profile_picture.jpg"
          "401":
            description: Unauthorized (user not logged in or invalid token)
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "User is not authenticated"
          "500":
            description: Internal server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Error fetching profile data"
      delete:
        summary: Delete the authenticated user's account
        description: |
          Deletes the currently authenticated user's account. 
          This action is irreversible, and all user data will be removed.
        responses:
          "200":
            description: Successfully deleted the user's account
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "User account deleted successfully"
          "401":
            description: Unauthorized (user not logged in or invalid token)
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "User is not authenticated"
          "500":
            description: Internal server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "Error deleting user account"

  /api/users/me/matches:
    get:
      summary: Get the authenticated user's match history
      description: |
        Retrieve the match history of the currently authenticated user. 
        This includes details about 1v1 games, dates, and relevant statistics.
      responses:
        "200":
          description: Successfully fetched the user's match history
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    match_id:
                      type: string
                      format: uuid
                      description: The unique identifier for the match
                    opponent:
                      type: string
                      description: The username of the opponent
                      example: "johnny"
                    date:
                      type: string
                      format: date-time
                      description: The date when the match took place
                      example: "2025-04-18T12:00:00Z"
                    result:
                      type: string
                      description: The result of the match (win/loss/draw)
                      example: "win"
                    score:
                      type: string
                      description: The score of the match
                      example: "3-1"
        "401":
          description: Unauthorized (user not logged in or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authenticated"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching match history"

  /api/users/me/avatar:
    post:
      summary: Change the authenticated user's avatar
      description: |
        Allows the authenticated user to upload or change their avatar image.
        The image will be stored and the user's profile will be updated with the new avatar.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: The image file for the avatar
      responses:
        "200":
          description: Avatar successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Avatar updated successfully"
                  avatar_url:
                    type: string
                    description: URL to the new avatar
                    example: "https://example.com/path/to/new_avatar.jpg"
        "400":
          description: Bad request (invalid file or unsupported format)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid file type. Please upload an image."
        "401":
          description: Unauthorized (user not logged in or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authenticated"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error uploading avatar"

  /api/users/me/friends:
    get:
      summary: View the authenticated user's friends
      description: |
        Retrieve the list of friends for the currently authenticated user. 
        This will return a list of usernames or user IDs representing the user's friends.
      responses:
        "200":
          description: Successfully fetched the user's friends list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    friend_id:
                      type: string
                      format: uuid
                      description: The unique ID of the friend
                    username:
                      type: string
                      description: The username of the friend
                      example: "johnny"
                    display_name:
                      type: string
                      description: The display name of the friend
                      example: "JohnnyTheGreat"
        "401":
          description: Unauthorized (user not logged in or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authenticated"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching friends list"

  /api/users/me/friend-requests:
    get:
      summary: View the incoming friend requests for the authenticated user
      description: |
        Retrieve the list of friend requests received by the currently authenticated user. 
        This will include the usernames or user IDs of users who sent friend requests.
      responses:
        "200":
          description: Successfully fetched the list of received friend requests
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    request_id:
                      type: string
                      format: uuid
                      description: The unique ID of the friend request
                    sender_id:
                      type: string
                      format: uuid
                      description: The ID of the user who sent the request
                    sender_username:
                      type: string
                      description: The username of the user who sent the friend request
                      example: "johnny"
        "401":
          description: Unauthorized (user not logged in or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authenticated"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching friend requests"

  /api/users/me/friend-requests/sent:
    get:
      summary: View the outgoing friend requests sent by the authenticated user
      description: |
        Retrieve the list of friend requests sent by the currently authenticated user.
        This will include the usernames or user IDs of users who received the friend requests.
      responses:
        "200":
          description: Successfully fetched the list of sent friend requests
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    request_id:
                      type: string
                      format: uuid
                      description: The unique ID of the friend request
                    recipient_id:
                      type: string
                      format: uuid
                      description: The ID of the user who received the request
                    recipient_username:
                      type: string
                      description: The username of the user who received the friend request
                      example: "jane_doe"
        "401":
          description: Unauthorized (user not logged in or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authenticated"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching sent friend requests"

  /api/users/{userId}/friend-requests:
    post:
      summary: Send a friend request to another user
      description: |
        Send a friend request from the authenticated user to the user identified by `userId`. 
        If the user has already sent a friend request or is already friends with the user, 
        this will return an error.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to send the friend request to
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: Friend request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Friend request sent successfully"
        "400":
          description: Bad request (e.g., user has already sent a request, or already friends)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Friend request already sent or user is already a friend"
        "401":
          description: Unauthorized (user not logged in or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authenticated"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error sending friend request"
    delete:
      summary: Reject a friend request from another user
      description: |
        Reject the incoming friend request from the user identified by `userId`.
        The request will be removed and no longer pending.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user whose friend request is being rejected
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Friend request rejected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Friend request rejected successfully"
        "400":
          description: Bad request (e.g., user not found or no pending request)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No pending request to reject"
        "401":
          description: Unauthorized (user not logged in or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authenticated"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error rejecting friend request"

  /api/users/{userId}/friend-requests/accept:
    post:
      summary: Accept a friend request from another user
      description: |
        Accept the incoming friend request from the user identified by `userId`.
        Once accepted, the users will be friends.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user whose friend request is being accepted
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Friend request accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Friend request accepted successfully"
        "400":
          description: Bad request (e.g., user not found or already friends)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Friend request already accepted or no pending request"
        "401":
          description: Unauthorized (user not logged in or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authenticated"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error accepting friend request"

  /api/users/{userId}/profile:
    get:
      summary: View another user's profile
      description: |
        Retrieve the profile details of another user by their `userId`. 
        This includes details like username, display name, email, and avatar.
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique ID of the user whose profile is to be viewed
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully fetched the user's profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: The user's username
                    example: "john"
                  display_name:
                    type: string
                    description: The user's display name
                    example: "JohnTheGreat"
                  email:
                    type: string
                    format: email
                    description: The user's email address
                    example: "john@example.com"
                  profile_picture:
                    type: string
                    description: URL to the user's profile picture
                    example: "https://example.com/path/to/profile_picture.jpg"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error fetching user profile"
                    
  /api/users/{userId}/friends:
    delete:
      summary: Remove a friend
      description: |
        Remove a user identified by `userId` from the authenticated user's friends list.
        This action removes the friendship relationship between the two users.
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to be removed from friends
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Friendship removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Friendship removed successfully"
        "400":
          description: Bad request (e.g., user not found or not friends)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not in your friends list"
        "401":
          description: Unauthorized (user not logged in or invalid token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User is not authenticated"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error removing friendship"

